<!DOCTYPE html>
<meta charset="utf-8" />
<head>
  <title>Countries Contiguity Force Graph</title>
  <style>
    body {
      margin: 0;
      font-family: sans-serif;
      background-color: #222;
    }
    svg {
      width: 100vw;
      height: 100vh;
    }
  </style>
</head>
<body>
  <!-- Load D3.js -->
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script>
    // Dataset URL
    const dataUrl = 'https://raw.githubusercontent.com/DealPete/forceDirected/master/countries.json';

    // Flag sprite URL - for simplicity, we'll use individual flag images from a CDN
    // Alternatively, you can generate a sprite sheet, but for simplicity, we'll fetch individual images.
    // This example uses flags from countryflags.io, but note they might have CORS restrictions.
    // You can also use "https://flagcdn.com" or other sources.
    
    // Function to get flag URL based on country code
    function getFlagUrl(countryCode) {
      // Make sure countryCode is lowercase and 2-letter code
      return `https://flagcdn.com/w40/${countryCode.toLowerCase()}.png`;
    }

    d3.json(dataUrl).then(data => {
      const nodes = data.nodes;
      const links = data.links;

      const width = window.innerWidth;
      const height = window.innerHeight;

      const svg = d3.select("body").append("svg")
        .attr("viewBox", [0, 0, width, height]);

      // Initialize force simulation
      const simulation = d3.forceSimulation(nodes)
        .force("link", d3.forceLink(links).id(d => d.id).distance(100))
        .force("charge", d3.forceManyBody().strength(-200))
        .force("center", d3.forceCenter(width / 2, height / 2));

      // Draw links
      const link = svg.append("g")
        .attr("stroke", "#999")
        .attr("stroke-opacity", 0.6)
        .selectAll("line")
        .data(links)
        .join("line")
        .attr("stroke-width", 1.5);

      // Draw nodes (flags)
      const node = svg.append("g")
        .selectAll("image")
        .data(nodes)
        .join("image")
        .attr("href", d => getFlagUrl(d.code))
        .attr("width", 40)
        .attr("height", 30)
        .attr("x", -20)
        .attr("y", -15)
        .call(drag(simulation));

      // Add tooltip on hover
      node.append("title")
        .text(d => d.name);

      // Simulation tick
      simulation.on("tick", () => {
        // Update link positions
        link
          .attr("x1", d => d.source.x)
          .attr("y1", d => d.source.y)
          .attr("x2", d => d.target.x)
          .attr("y2", d => d.target.y);

        // Update node positions
        node
          .attr("x", d => d.x - 20)
          .attr("y", d => d.y - 15);
      });

      // Drag behavior
      function drag(simulation) {
        function dragstarted(event, d) {
          if (!event.active) simulation.alphaTarget(0.3).restart();
          d.fx = d.x;
          d.fy = d.y;
        }
        function dragged(event, d) {
          d.fx = event.x;
          d.fy = event.y;
        }
        function dragended(event, d) {
          if (!event.active) simulation.alphaTarget(0);
          d.fx = null;
          d.fy = null;
        }
        return d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended);
      }
    });
  </script>
</body>
